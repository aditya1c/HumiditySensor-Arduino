
vamsidryer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004ae  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c44  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000640  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000027a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004da  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017b  00000000  00000000  00002d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00002e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012a  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000181  00000000  00000000  0000335a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitADC>:
#include <util/delay.h>
#include <avr/io.h>
#include <math.h>
void InitADC()
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <ReadADC>:

uint8_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
  9c:	97 b1       	in	r25, 0x07	; 7
}

uint8_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  9e:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  a0:	98 2b       	or	r25, r24
  a2:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  a4:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while (!(ADCSRA & (1<<ADIF)));
  a6:	34 9b       	sbis	0x06, 4	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <ReadADC+0xa>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  aa:	34 9a       	sbi	0x06, 4	; 6
	ADMUX|=(1<<ADLAR);
  ac:	3d 9a       	sbi	0x07, 5	; 7

	return(ADCH);
  ae:	85 b1       	in	r24, 0x05	; 5
}
  b0:	08 95       	ret

000000b2 <main>:


int main(void)
{DDRA=0x00;
  b2:	1a ba       	out	0x1a, r1	; 26
DDRB=0xff;  
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 bb       	out	0x17, r24	; 23
int i;
float time;
int s=0;


InitADC();
  b8:	0e 94 49 00 	call	0x92	; 0x92 <InitADC>
	return(ADCH);
}


int main(void)
{DDRA=0x00;
  bc:	44 24       	eor	r4, r4
  be:	55 24       	eor	r5, r5
		valhum=ReadADC(1);
		if (valir>refir)
		  {if(s==0)
		{
			time=5+((valhum-100)*0.2);
			PORTB=0xff;
  c0:	aa 24       	eor	r10, r10
  c2:	aa 94       	dec	r10
			for(i=0;i<=time;i++)
			{_delay_ms(1000);}
		PORTB=0x00;
		s=1;		
  c4:	66 24       	eor	r6, r6
  c6:	77 24       	eor	r7, r7
  c8:	63 94       	inc	r6
		if (valir>refir)
		  {if(s==0)
		{
			time=5+((valhum-100)*0.2);
			PORTB=0xff;
			for(i=0;i<=time;i++)
  ca:	94 2c       	mov	r9, r4
  cc:	85 2c       	mov	r8, r5
	return(ADCH);
}


int main(void)
{DDRA=0x00;
  ce:	e2 01       	movw	r28, r4
int s=0;


InitADC();
  while(1)
    {InitADC();
  d0:	0e 94 49 00 	call	0x92	; 0x92 <InitADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	9f e8       	ldi	r25, 0x8F	; 143
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x26>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x2c>
  de:	00 00       	nop
		_delay_ms(10);
		valir=ReadADC(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
  e6:	b8 2e       	mov	r11, r24
		InitADC();
  e8:	0e 94 49 00 	call	0x92	; 0x92 <InitADC>
  ec:	af ef       	ldi	r26, 0xFF	; 255
  ee:	bf e8       	ldi	r27, 0x8F	; 143
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x3e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x44>
  f6:	00 00       	nop
		_delay_ms(10);
		valhum=ReadADC(1);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
		if (valir>refir)
  fe:	b0 e8       	ldi	r27, 0x80	; 128
 100:	bb 15       	cp	r27, r11
 102:	08 f0       	brcs	.+2      	; 0x106 <main+0x54>
 104:	4a c0       	rjmp	.+148    	; 0x19a <main+0xe8>
		  {if(s==0)
 106:	20 97       	sbiw	r28, 0x00	; 0
 108:	09 f0       	breq	.+2      	; 0x10c <main+0x5a>
 10a:	47 c0       	rjmp	.+142    	; 0x19a <main+0xe8>
		{
			time=5+((valhum-100)*0.2);
 10c:	68 2f       	mov	r22, r24
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	64 56       	subi	r22, 0x64	; 100
 112:	70 40       	sbci	r23, 0x00	; 0
 114:	88 27       	eor	r24, r24
 116:	77 fd       	sbrc	r23, 7
 118:	80 95       	com	r24
 11a:	98 2f       	mov	r25, r24
 11c:	0e 94 3e 01 	call	0x27c	; 0x27c <__floatsisf>
 120:	2d ec       	ldi	r18, 0xCD	; 205
 122:	3c ec       	ldi	r19, 0xCC	; 204
 124:	4c e4       	ldi	r20, 0x4C	; 76
 126:	5e e3       	ldi	r21, 0x3E	; 62
 128:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsf3>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 ea       	ldi	r20, 0xA0	; 160
 132:	50 e4       	ldi	r21, 0x40	; 64
 134:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__addsf3>
 138:	c6 2e       	mov	r12, r22
 13a:	d7 2e       	mov	r13, r23
 13c:	e8 2e       	mov	r14, r24
 13e:	f9 2e       	mov	r15, r25
			PORTB=0xff;
 140:	a8 ba       	out	0x18, r10	; 24
			for(i=0;i<=time;i++)
 142:	86 2f       	mov	r24, r22
 144:	9d 2d       	mov	r25, r13
 146:	ae 2d       	mov	r26, r14
 148:	bf 2d       	mov	r27, r15
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	a9 01       	movw	r20, r18
 154:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__gesf2>
 158:	88 23       	and	r24, r24
 15a:	ec f0       	brlt	.+58     	; 0x196 <main+0xe4>
 15c:	c9 2d       	mov	r28, r9
 15e:	d8 2d       	mov	r29, r8
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	ac e2       	ldi	r26, 0x2C	; 44
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xb4>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xbe>
 170:	00 00       	nop
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	be 01       	movw	r22, r28
 176:	88 27       	eor	r24, r24
 178:	77 fd       	sbrc	r23, 7
 17a:	80 95       	com	r24
 17c:	98 2f       	mov	r25, r24
 17e:	0e 94 3e 01 	call	0x27c	; 0x27c <__floatsisf>
 182:	0c 2d       	mov	r16, r12
 184:	1d 2d       	mov	r17, r13
 186:	2e 2d       	mov	r18, r14
 188:	3f 2d       	mov	r19, r15
 18a:	a9 01       	movw	r20, r18
 18c:	98 01       	movw	r18, r16
 18e:	0e 94 38 01 	call	0x270	; 0x270 <__cmpsf2>
 192:	18 16       	cp	r1, r24
 194:	2c f7       	brge	.-54     	; 0x160 <main+0xae>
			{_delay_ms(1000);}
		PORTB=0x00;
 196:	18 ba       	out	0x18, r1	; 24
		s=1;		
 198:	e3 01       	movw	r28, r6
		}}
		if (valir<refir)
 19a:	90 e8       	ldi	r25, 0x80	; 128
 19c:	b9 16       	cp	r11, r25
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <main+0xf0>
 1a0:	97 cf       	rjmp	.-210    	; 0xd0 <main+0x1e>
		{PORTB=0x00;
 1a2:	18 ba       	out	0x18, r1	; 24
 1a4:	94 cf       	rjmp	.-216    	; 0xce <main+0x1c>

000001a6 <__subsf3>:
 1a6:	50 58       	subi	r21, 0x80	; 128

000001a8 <__addsf3>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	aa 27       	eor	r26, r26
 1ac:	0e d0       	rcall	.+28     	; 0x1ca <__addsf3x>
 1ae:	dc c0       	rjmp	.+440    	; 0x368 <__fp_round>
 1b0:	cd d0       	rcall	.+410    	; 0x34c <__fp_pscA>
 1b2:	30 f0       	brcs	.+12     	; 0x1c0 <__addsf3+0x18>
 1b4:	d2 d0       	rcall	.+420    	; 0x35a <__fp_pscB>
 1b6:	20 f0       	brcs	.+8      	; 0x1c0 <__addsf3+0x18>
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <__addsf3+0x1e>
 1ba:	9f 3f       	cpi	r25, 0xFF	; 255
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <__addsf3+0x1a>
 1be:	1e f4       	brtc	.+6      	; 0x1c6 <__addsf3+0x1e>
 1c0:	c2 c0       	rjmp	.+388    	; 0x346 <__fp_nan>
 1c2:	0e f4       	brtc	.+2      	; 0x1c6 <__addsf3+0x1e>
 1c4:	e0 95       	com	r30
 1c6:	e7 fb       	bst	r30, 7
 1c8:	b8 c0       	rjmp	.+368    	; 0x33a <__fp_inf>

000001ca <__addsf3x>:
 1ca:	e9 2f       	mov	r30, r25
 1cc:	de d0       	rcall	.+444    	; 0x38a <__fp_split3>
 1ce:	80 f3       	brcs	.-32     	; 0x1b0 <__addsf3+0x8>
 1d0:	ba 17       	cp	r27, r26
 1d2:	62 07       	cpc	r22, r18
 1d4:	73 07       	cpc	r23, r19
 1d6:	84 07       	cpc	r24, r20
 1d8:	95 07       	cpc	r25, r21
 1da:	18 f0       	brcs	.+6      	; 0x1e2 <__addsf3x+0x18>
 1dc:	71 f4       	brne	.+28     	; 0x1fa <__addsf3x+0x30>
 1de:	9e f5       	brtc	.+102    	; 0x246 <__addsf3x+0x7c>
 1e0:	f6 c0       	rjmp	.+492    	; 0x3ce <__fp_zero>
 1e2:	0e f4       	brtc	.+2      	; 0x1e6 <__addsf3x+0x1c>
 1e4:	e0 95       	com	r30
 1e6:	0b 2e       	mov	r0, r27
 1e8:	ba 2f       	mov	r27, r26
 1ea:	a0 2d       	mov	r26, r0
 1ec:	0b 01       	movw	r0, r22
 1ee:	b9 01       	movw	r22, r18
 1f0:	90 01       	movw	r18, r0
 1f2:	0c 01       	movw	r0, r24
 1f4:	ca 01       	movw	r24, r20
 1f6:	a0 01       	movw	r20, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	ff 27       	eor	r31, r31
 1fc:	59 1b       	sub	r21, r25
 1fe:	99 f0       	breq	.+38     	; 0x226 <__addsf3x+0x5c>
 200:	59 3f       	cpi	r21, 0xF9	; 249
 202:	50 f4       	brcc	.+20     	; 0x218 <__addsf3x+0x4e>
 204:	50 3e       	cpi	r21, 0xE0	; 224
 206:	68 f1       	brcs	.+90     	; 0x262 <__addsf3x+0x98>
 208:	1a 16       	cp	r1, r26
 20a:	f0 40       	sbci	r31, 0x00	; 0
 20c:	a2 2f       	mov	r26, r18
 20e:	23 2f       	mov	r18, r19
 210:	34 2f       	mov	r19, r20
 212:	44 27       	eor	r20, r20
 214:	58 5f       	subi	r21, 0xF8	; 248
 216:	f3 cf       	rjmp	.-26     	; 0x1fe <__addsf3x+0x34>
 218:	46 95       	lsr	r20
 21a:	37 95       	ror	r19
 21c:	27 95       	ror	r18
 21e:	a7 95       	ror	r26
 220:	f0 40       	sbci	r31, 0x00	; 0
 222:	53 95       	inc	r21
 224:	c9 f7       	brne	.-14     	; 0x218 <__addsf3x+0x4e>
 226:	7e f4       	brtc	.+30     	; 0x246 <__addsf3x+0x7c>
 228:	1f 16       	cp	r1, r31
 22a:	ba 0b       	sbc	r27, r26
 22c:	62 0b       	sbc	r22, r18
 22e:	73 0b       	sbc	r23, r19
 230:	84 0b       	sbc	r24, r20
 232:	ba f0       	brmi	.+46     	; 0x262 <__addsf3x+0x98>
 234:	91 50       	subi	r25, 0x01	; 1
 236:	a1 f0       	breq	.+40     	; 0x260 <__addsf3x+0x96>
 238:	ff 0f       	add	r31, r31
 23a:	bb 1f       	adc	r27, r27
 23c:	66 1f       	adc	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	88 1f       	adc	r24, r24
 242:	c2 f7       	brpl	.-16     	; 0x234 <__addsf3x+0x6a>
 244:	0e c0       	rjmp	.+28     	; 0x262 <__addsf3x+0x98>
 246:	ba 0f       	add	r27, r26
 248:	62 1f       	adc	r22, r18
 24a:	73 1f       	adc	r23, r19
 24c:	84 1f       	adc	r24, r20
 24e:	48 f4       	brcc	.+18     	; 0x262 <__addsf3x+0x98>
 250:	87 95       	ror	r24
 252:	77 95       	ror	r23
 254:	67 95       	ror	r22
 256:	b7 95       	ror	r27
 258:	f7 95       	ror	r31
 25a:	9e 3f       	cpi	r25, 0xFE	; 254
 25c:	08 f0       	brcs	.+2      	; 0x260 <__addsf3x+0x96>
 25e:	b3 cf       	rjmp	.-154    	; 0x1c6 <__addsf3+0x1e>
 260:	93 95       	inc	r25
 262:	88 0f       	add	r24, r24
 264:	08 f0       	brcs	.+2      	; 0x268 <__addsf3x+0x9e>
 266:	99 27       	eor	r25, r25
 268:	ee 0f       	add	r30, r30
 26a:	97 95       	ror	r25
 26c:	87 95       	ror	r24
 26e:	08 95       	ret

00000270 <__cmpsf2>:
 270:	40 d0       	rcall	.+128    	; 0x2f2 <__fp_cmp>
 272:	08 f4       	brcc	.+2      	; 0x276 <__cmpsf2+0x6>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret

00000278 <__floatunsisf>:
 278:	e8 94       	clt
 27a:	09 c0       	rjmp	.+18     	; 0x28e <__floatsisf+0x12>

0000027c <__floatsisf>:
 27c:	97 fb       	bst	r25, 7
 27e:	3e f4       	brtc	.+14     	; 0x28e <__floatsisf+0x12>
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	99 23       	and	r25, r25
 290:	a9 f0       	breq	.+42     	; 0x2bc <__floatsisf+0x40>
 292:	f9 2f       	mov	r31, r25
 294:	96 e9       	ldi	r25, 0x96	; 150
 296:	bb 27       	eor	r27, r27
 298:	93 95       	inc	r25
 29a:	f6 95       	lsr	r31
 29c:	87 95       	ror	r24
 29e:	77 95       	ror	r23
 2a0:	67 95       	ror	r22
 2a2:	b7 95       	ror	r27
 2a4:	f1 11       	cpse	r31, r1
 2a6:	f8 cf       	rjmp	.-16     	; 0x298 <__floatsisf+0x1c>
 2a8:	fa f4       	brpl	.+62     	; 0x2e8 <__floatsisf+0x6c>
 2aa:	bb 0f       	add	r27, r27
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <__floatsisf+0x36>
 2ae:	60 ff       	sbrs	r22, 0
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <__floatsisf+0x6c>
 2b2:	6f 5f       	subi	r22, 0xFF	; 255
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	8f 4f       	sbci	r24, 0xFF	; 255
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <__floatsisf+0x6c>
 2bc:	88 23       	and	r24, r24
 2be:	11 f0       	breq	.+4      	; 0x2c4 <__floatsisf+0x48>
 2c0:	96 e9       	ldi	r25, 0x96	; 150
 2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <__floatsisf+0x6a>
 2c4:	77 23       	and	r23, r23
 2c6:	21 f0       	breq	.+8      	; 0x2d0 <__floatsisf+0x54>
 2c8:	9e e8       	ldi	r25, 0x8E	; 142
 2ca:	87 2f       	mov	r24, r23
 2cc:	76 2f       	mov	r23, r22
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <__floatsisf+0x5e>
 2d0:	66 23       	and	r22, r22
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <__floatsisf+0x74>
 2d4:	96 e8       	ldi	r25, 0x86	; 134
 2d6:	86 2f       	mov	r24, r22
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	2a f0       	brmi	.+10     	; 0x2e8 <__floatsisf+0x6c>
 2de:	9a 95       	dec	r25
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	88 1f       	adc	r24, r24
 2e6:	da f7       	brpl	.-10     	; 0x2de <__floatsisf+0x62>
 2e8:	88 0f       	add	r24, r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	97 f9       	bld	r25, 7
 2f0:	08 95       	ret

000002f2 <__fp_cmp>:
 2f2:	99 0f       	add	r25, r25
 2f4:	00 08       	sbc	r0, r0
 2f6:	55 0f       	add	r21, r21
 2f8:	aa 0b       	sbc	r26, r26
 2fa:	e0 e8       	ldi	r30, 0x80	; 128
 2fc:	fe ef       	ldi	r31, 0xFE	; 254
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	e8 07       	cpc	r30, r24
 304:	f9 07       	cpc	r31, r25
 306:	c0 f0       	brcs	.+48     	; 0x338 <__fp_cmp+0x46>
 308:	12 16       	cp	r1, r18
 30a:	13 06       	cpc	r1, r19
 30c:	e4 07       	cpc	r30, r20
 30e:	f5 07       	cpc	r31, r21
 310:	98 f0       	brcs	.+38     	; 0x338 <__fp_cmp+0x46>
 312:	62 1b       	sub	r22, r18
 314:	73 0b       	sbc	r23, r19
 316:	84 0b       	sbc	r24, r20
 318:	95 0b       	sbc	r25, r21
 31a:	39 f4       	brne	.+14     	; 0x32a <__fp_cmp+0x38>
 31c:	0a 26       	eor	r0, r26
 31e:	61 f0       	breq	.+24     	; 0x338 <__fp_cmp+0x46>
 320:	23 2b       	or	r18, r19
 322:	24 2b       	or	r18, r20
 324:	25 2b       	or	r18, r21
 326:	21 f4       	brne	.+8      	; 0x330 <__fp_cmp+0x3e>
 328:	08 95       	ret
 32a:	0a 26       	eor	r0, r26
 32c:	09 f4       	brne	.+2      	; 0x330 <__fp_cmp+0x3e>
 32e:	a1 40       	sbci	r26, 0x01	; 1
 330:	a6 95       	lsr	r26
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	81 1d       	adc	r24, r1
 336:	81 1d       	adc	r24, r1
 338:	08 95       	ret

0000033a <__fp_inf>:
 33a:	97 f9       	bld	r25, 7
 33c:	9f 67       	ori	r25, 0x7F	; 127
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	08 95       	ret

00000346 <__fp_nan>:
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	80 ec       	ldi	r24, 0xC0	; 192
 34a:	08 95       	ret

0000034c <__fp_pscA>:
 34c:	00 24       	eor	r0, r0
 34e:	0a 94       	dec	r0
 350:	16 16       	cp	r1, r22
 352:	17 06       	cpc	r1, r23
 354:	18 06       	cpc	r1, r24
 356:	09 06       	cpc	r0, r25
 358:	08 95       	ret

0000035a <__fp_pscB>:
 35a:	00 24       	eor	r0, r0
 35c:	0a 94       	dec	r0
 35e:	12 16       	cp	r1, r18
 360:	13 06       	cpc	r1, r19
 362:	14 06       	cpc	r1, r20
 364:	05 06       	cpc	r0, r21
 366:	08 95       	ret

00000368 <__fp_round>:
 368:	09 2e       	mov	r0, r25
 36a:	03 94       	inc	r0
 36c:	00 0c       	add	r0, r0
 36e:	11 f4       	brne	.+4      	; 0x374 <__fp_round+0xc>
 370:	88 23       	and	r24, r24
 372:	52 f0       	brmi	.+20     	; 0x388 <__fp_round+0x20>
 374:	bb 0f       	add	r27, r27
 376:	40 f4       	brcc	.+16     	; 0x388 <__fp_round+0x20>
 378:	bf 2b       	or	r27, r31
 37a:	11 f4       	brne	.+4      	; 0x380 <__fp_round+0x18>
 37c:	60 ff       	sbrs	r22, 0
 37e:	04 c0       	rjmp	.+8      	; 0x388 <__fp_round+0x20>
 380:	6f 5f       	subi	r22, 0xFF	; 255
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	08 95       	ret

0000038a <__fp_split3>:
 38a:	57 fd       	sbrc	r21, 7
 38c:	90 58       	subi	r25, 0x80	; 128
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	59 f0       	breq	.+22     	; 0x3aa <__fp_splitA+0x10>
 394:	5f 3f       	cpi	r21, 0xFF	; 255
 396:	71 f0       	breq	.+28     	; 0x3b4 <__fp_splitA+0x1a>
 398:	47 95       	ror	r20

0000039a <__fp_splitA>:
 39a:	88 0f       	add	r24, r24
 39c:	97 fb       	bst	r25, 7
 39e:	99 1f       	adc	r25, r25
 3a0:	61 f0       	breq	.+24     	; 0x3ba <__fp_splitA+0x20>
 3a2:	9f 3f       	cpi	r25, 0xFF	; 255
 3a4:	79 f0       	breq	.+30     	; 0x3c4 <__fp_splitA+0x2a>
 3a6:	87 95       	ror	r24
 3a8:	08 95       	ret
 3aa:	12 16       	cp	r1, r18
 3ac:	13 06       	cpc	r1, r19
 3ae:	14 06       	cpc	r1, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	f2 cf       	rjmp	.-28     	; 0x398 <__fp_split3+0xe>
 3b4:	46 95       	lsr	r20
 3b6:	f1 df       	rcall	.-30     	; 0x39a <__fp_splitA>
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <__fp_splitA+0x30>
 3ba:	16 16       	cp	r1, r22
 3bc:	17 06       	cpc	r1, r23
 3be:	18 06       	cpc	r1, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	f1 cf       	rjmp	.-30     	; 0x3a6 <__fp_splitA+0xc>
 3c4:	86 95       	lsr	r24
 3c6:	71 05       	cpc	r23, r1
 3c8:	61 05       	cpc	r22, r1
 3ca:	08 94       	sec
 3cc:	08 95       	ret

000003ce <__fp_zero>:
 3ce:	e8 94       	clt

000003d0 <__fp_szero>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	66 27       	eor	r22, r22
 3d4:	77 27       	eor	r23, r23
 3d6:	cb 01       	movw	r24, r22
 3d8:	97 f9       	bld	r25, 7
 3da:	08 95       	ret

000003dc <__gesf2>:
 3dc:	8a df       	rcall	.-236    	; 0x2f2 <__fp_cmp>
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <__gesf2+0x6>
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	08 95       	ret

000003e4 <__mulsf3>:
 3e4:	0b d0       	rcall	.+22     	; 0x3fc <__mulsf3x>
 3e6:	c0 cf       	rjmp	.-128    	; 0x368 <__fp_round>
 3e8:	b1 df       	rcall	.-158    	; 0x34c <__fp_pscA>
 3ea:	28 f0       	brcs	.+10     	; 0x3f6 <__mulsf3+0x12>
 3ec:	b6 df       	rcall	.-148    	; 0x35a <__fp_pscB>
 3ee:	18 f0       	brcs	.+6      	; 0x3f6 <__mulsf3+0x12>
 3f0:	95 23       	and	r25, r21
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <__mulsf3+0x12>
 3f4:	a2 cf       	rjmp	.-188    	; 0x33a <__fp_inf>
 3f6:	a7 cf       	rjmp	.-178    	; 0x346 <__fp_nan>
 3f8:	11 24       	eor	r1, r1
 3fa:	ea cf       	rjmp	.-44     	; 0x3d0 <__fp_szero>

000003fc <__mulsf3x>:
 3fc:	c6 df       	rcall	.-116    	; 0x38a <__fp_split3>
 3fe:	a0 f3       	brcs	.-24     	; 0x3e8 <__mulsf3+0x4>

00000400 <__mulsf3_pse>:
 400:	95 9f       	mul	r25, r21
 402:	d1 f3       	breq	.-12     	; 0x3f8 <__mulsf3+0x14>
 404:	95 0f       	add	r25, r21
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	55 1f       	adc	r21, r21
 40a:	62 9f       	mul	r22, r18
 40c:	f0 01       	movw	r30, r0
 40e:	72 9f       	mul	r23, r18
 410:	bb 27       	eor	r27, r27
 412:	f0 0d       	add	r31, r0
 414:	b1 1d       	adc	r27, r1
 416:	63 9f       	mul	r22, r19
 418:	aa 27       	eor	r26, r26
 41a:	f0 0d       	add	r31, r0
 41c:	b1 1d       	adc	r27, r1
 41e:	aa 1f       	adc	r26, r26
 420:	64 9f       	mul	r22, r20
 422:	66 27       	eor	r22, r22
 424:	b0 0d       	add	r27, r0
 426:	a1 1d       	adc	r26, r1
 428:	66 1f       	adc	r22, r22
 42a:	82 9f       	mul	r24, r18
 42c:	22 27       	eor	r18, r18
 42e:	b0 0d       	add	r27, r0
 430:	a1 1d       	adc	r26, r1
 432:	62 1f       	adc	r22, r18
 434:	73 9f       	mul	r23, r19
 436:	b0 0d       	add	r27, r0
 438:	a1 1d       	adc	r26, r1
 43a:	62 1f       	adc	r22, r18
 43c:	83 9f       	mul	r24, r19
 43e:	a0 0d       	add	r26, r0
 440:	61 1d       	adc	r22, r1
 442:	22 1f       	adc	r18, r18
 444:	74 9f       	mul	r23, r20
 446:	33 27       	eor	r19, r19
 448:	a0 0d       	add	r26, r0
 44a:	61 1d       	adc	r22, r1
 44c:	23 1f       	adc	r18, r19
 44e:	84 9f       	mul	r24, r20
 450:	60 0d       	add	r22, r0
 452:	21 1d       	adc	r18, r1
 454:	82 2f       	mov	r24, r18
 456:	76 2f       	mov	r23, r22
 458:	6a 2f       	mov	r22, r26
 45a:	11 24       	eor	r1, r1
 45c:	9f 57       	subi	r25, 0x7F	; 127
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	8a f0       	brmi	.+34     	; 0x484 <__mulsf3_pse+0x84>
 462:	e1 f0       	breq	.+56     	; 0x49c <__mulsf3_pse+0x9c>
 464:	88 23       	and	r24, r24
 466:	4a f0       	brmi	.+18     	; 0x47a <__mulsf3_pse+0x7a>
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	bb 1f       	adc	r27, r27
 46e:	66 1f       	adc	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	91 50       	subi	r25, 0x01	; 1
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	a9 f7       	brne	.-22     	; 0x464 <__mulsf3_pse+0x64>
 47a:	9e 3f       	cpi	r25, 0xFE	; 254
 47c:	51 05       	cpc	r21, r1
 47e:	70 f0       	brcs	.+28     	; 0x49c <__mulsf3_pse+0x9c>
 480:	5c cf       	rjmp	.-328    	; 0x33a <__fp_inf>
 482:	a6 cf       	rjmp	.-180    	; 0x3d0 <__fp_szero>
 484:	5f 3f       	cpi	r21, 0xFF	; 255
 486:	ec f3       	brlt	.-6      	; 0x482 <__mulsf3_pse+0x82>
 488:	98 3e       	cpi	r25, 0xE8	; 232
 48a:	dc f3       	brlt	.-10     	; 0x482 <__mulsf3_pse+0x82>
 48c:	86 95       	lsr	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	e7 95       	ror	r30
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	c1 f7       	brne	.-16     	; 0x48c <__mulsf3_pse+0x8c>
 49c:	fe 2b       	or	r31, r30
 49e:	88 0f       	add	r24, r24
 4a0:	91 1d       	adc	r25, r1
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
